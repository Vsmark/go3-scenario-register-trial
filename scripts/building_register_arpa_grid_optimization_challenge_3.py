# -*- coding: utf-8 -*-
"""Building Register: ARPA Grid Optimization Challenge 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15zNqCM5Ndk9i9PwuGztzgJ4-efa8k5Ln

### This is the final file with descripiton register
"""

import json
import pandas as pd

def analyze_and_display(json_path, scenario_name="My Scenario"):
    try:
        with open(json_path, 'r') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"❌ File not found: {json_path}")
        return
    except json.JSONDecodeError:
        print(f"❌ Failed to parse JSON: {json_path}")
        return

    # Extract key elements
    ts = data['time_series_input']['general']
    duration = sum(ts['interval_duration'])
    time_steps = ts['time_periods']

    buses = data['network']['bus']
    ac_lines = data['network']['ac_line']
    transformers = data['network']['two_winding_transformer']
    devices = data['network']['simple_dispatchable_device']
    contingencies = data['reliability']['contingency']

    generators = [d for d in devices if d['device_type'] == 'producer']
    loads = [d for d in devices if d['device_type'] == 'consumer']
    total_p_load = sum(d['initial_status']['p'] for d in loads)
    total_q_load = sum(d['initial_status']['q'] for d in loads)
    total_p_gen = sum(d['initial_status']['p'] for d in generators)

    grid_size = (
        "Small" if len(buses) <= 3 else
        "Medium" if len(buses) <= 10 else
        "Large"
    )

    status = "Valid"
    HET = duration
    TOL = 1e-6
    for d in devices:
        for field in ['energy_req_lb', 'energy_req_ub', 'startups_ub']:
            if field in d:
                for entry in d[field]:
                    if entry[1] > HET + TOL:
                        status = "Invalid"
                        break

    desc = (
        f"This is a {grid_size} grid with {len(buses)} buses and a planning horizon of {duration:.1f} hours. "
        f"It has {len(generators)} producers and {len(loads)} consumers. "
        f"Total initial active load is {total_p_load:.3f} pu and reactive load is {total_q_load:.3f} pu. "
        f"The generators produce {total_p_gen:.3f} pu initially. "
        f"There are {len(ac_lines)} AC lines, {len(transformers)} transformers, and {len(contingencies)} contingency cases."
    )

    # Build a one-row dataframe
    result = {
        "Scenario": scenario_name,
        "Duration (h)": duration,
        "Time Steps": time_steps,
        "Buses": len(buses),
        "Generators": len(generators),
        "Loads": len(loads),
        "AC Lines": len(ac_lines),
        "Transformers": len(transformers),
        "Contingencies": len(contingencies),
        "Total Load (pu)": total_p_load,
        "Total Generation (pu)": total_p_gen,
        "Grid Size": grid_size,
        "Status": status,
        "Description": desc
    }

    df = pd.DataFrame([result])
    df.set_index("Scenario", inplace=True)

    print(f"✅ Summary for: {scenario_name}\n")
    display(df)

    return df
